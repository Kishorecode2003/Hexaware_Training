-- Ecommerce SQL
-- Create Database
CREATE DATABASE IF NOT EXISTS Ecommerce;
USE Ecommerce;

-- Create Customers Table
CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    address VARCHAR(255) NOT NULL,
    password VARCHAR(100) NOT NULL DEFAULT 'default@123'
);

-- Create Products Table
CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(255),
    price DECIMAL(10,2) NOT NULL CHECK (price >= 0),
    stockQuantity INT NOT NULL CHECK (stockQuantity >= 0)
);

-- Create Cart Table
CREATE TABLE cart (
    cart_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE
);

-- Create Orders Table
CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE NOT NULL,
    total_price DECIMAL(10,2) NOT NULL CHECK (total_price >= 0),
    shipping_address VARCHAR(255) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE
);

-- Create Order Items Table
CREATE TABLE order_items (
    order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    itemAmount DECIMAL(10,2) NOT NULL CHECK (itemAmount >= 0),
    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE
);

-- Insert Customers
INSERT INTO customers (first_name, last_name, email, address) VALUES
('John', 'Doe', 'johndoe@example.com', '123 Main St, City'),
('Jane', 'Smith', 'janesmith@example.com', '456 Elm St, Town'),
('Robert', 'Johnson', 'robert@example.com', '789 Oak St, Village'),
('Sarah', 'Brown', 'sarah@example.com', '101 Pine St, Suburb'),
('David', 'Lee', 'david@example.com', '234 Cedar St, District'),
('Laura', 'Hall', 'laura@example.com', '567 Birch St, County'),
('Michael', 'Davis', 'michael@example.com', '890 Maple St, State'),
('Emma', 'Wilson', 'emma@example.com', '321 Redwood St, Country'),
('William', 'Taylor', 'william@example.com', '432 Spruce St, Province'),
('Olivia', 'Adams', 'olivia@example.com', '765 Fir St, Territory');

-- Insert Products
INSERT INTO products (name, description, price, stockQuantity) VALUES
('Laptop', 'High-performance laptop', 800.00, 10),
('Smartphone', 'Latest smartphone', 600.00, 15),
('Tablet', 'Portable tablet', 300.00, 20),
('Headphones', 'Noise-canceling', 150.00, 30),
('TV', '4K Smart TV', 900.00, 5),
('Coffee Maker', 'Automatic coffee maker', 50.00, 25),
('Refrigerator', 'Energy-efficient', 700.00, 10),
('Microwave Oven', 'Countertop microwave', 80.00, 15),
('Blender', 'High-speed blender', 70.00, 20),
('Vacuum Cleaner', 'Bagless vacuum cleaner', 120.00, 10);

-- Insert Orders
INSERT INTO orders (customer_id, order_date, total_price, shipping_address) VALUES
(1, '2023-01-05', 1200.00, '123 Main St, City'),
(2, '2023-02-10', 900.00, '456 Elm St, Town'),
(3, '2023-03-15', 300.00, '789 Oak St, Village'),
(4, '2023-04-20', 150.00, '101 Pine St, Suburb'),
(5, '2023-05-25', 1800.00, '234 Cedar St, District'),
(6, '2023-06-30', 400.00, '567 Birch St, County'),
(7, '2023-07-05', 700.00, '890 Maple St, State'),
(8, '2023-08-10', 160.00, '321 Redwood St, Country'),
(9, '2023-09-15', 140.00, '432 Spruce St, Province'),
(10, '2023-10-20', 1400.00, '765 Fir St, Territory');

-- Insert Order Items
INSERT INTO order_items (order_id, product_id, quantity, itemAmount) VALUES
(1, 1, 2, 1600.00),
(1, 3, 1, 300.00),
(2, 2, 3, 1800.00),
(3, 5, 2, 1800.00),
(4, 4, 4, 600.00),
(4, 6, 1, 50.00),
(5, 1, 1, 800.00),
(5, 2, 2, 1200.00),
(6, 10, 2, 240.00),
(6, 9, 3, 210.00);

-- Insert Cart Items
INSERT INTO cart (customer_id, product_id, quantity) VALUES
(1, 1, 2),
(1, 3, 1),
(2, 2, 3),
(3, 4, 4),
(3, 5, 2),
(4, 6, 1),
(5, 1, 1),
(6, 10, 2),
(6, 9, 3),
(7, 7, 2);

SET SQL_SAFE_UPDATES = 0;

-- 1. Update refrigerator product price to 800.
UPDATE products 
SET price = 800 
WHERE name = 'Refrigerator';

-- 2. Remove all cart items for a specific customer.
DELETE FROM cart 
WHERE customer_id = 6;

-- 3. Retrieve Products Priced Below $100.
SELECT * 
FROM products 
WHERE price < 100;

-- 4. Find Products with Stock Quantity Greater Than 5
SELECT * 
FROM products 
WHERE stockQuantity > 5;

-- 5. Retrieve Orders with Total Amount Between $500 and $1000.
SELECT * 
FROM orders 
WHERE total_price BETWEEN 500 AND 1000;

-- 6. Find Products which name end with letter ‘r’.
SELECT * 
FROM products 
WHERE name LIKE '%r';

-- 7. Retrieve Cart Items for Customer 5.
SELECT * 
FROM cart 
WHERE customer_id = 5;

-- 8. Find Customers Who Placed Orders in 2023.
SELECT DISTINCT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS name, c.email  
FROM customers c  
JOIN orders o ON c.customer_id = o.customer_id  
WHERE YEAR(o.order_date) = 2023  
LIMIT 1000;

-- 9.Minimum stock quantity from products
SELECT MIN(stockQuantity) AS min_stock 
FROM products;
-- Minimum stock quantity from each product category
SELECT 
    name AS product_name, 
    MIN(stockQuantity) AS min_stock
FROM products
GROUP BY name;

-- 10. Calculate the Total Amount Spent by Each Customer.
SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS name, 
       SUM(o.total_price) AS total_spent 
FROM customers c  
JOIN orders o ON c.customer_id = o.customer_id  
GROUP BY c.customer_id, c.first_name, c.last_name  
LIMIT 1000;

-- 11. Find the Average Order Amount for Each Customer.
SELECT 
    customer_id, 
    ROUND(AVG(total_price), 2) AS avg_order_amount
FROM orders
GROUP BY customer_id;

--  12. Count the Number of Orders Placed by Each Customer.
SELECT 
    c.customer_id, 
    c.first_name as Name, 
    COUNT(o.order_id) AS order_count
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name;

-- 13. Find the Maximum Order Amount for Each Customer.
SELECT customer_id, MAX(total_price) AS max_order_amount
FROM orders
GROUP BY customer_id;

-- 14. Get Customers Who Placed Orders Totaling Over $1000.
SELECT 
    c.customer_id, 
    c.first_name AS Name, 
    SUM(o.total_price) AS total_spent
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name
HAVING SUM(o.total_price) > 1000;

--  15. Subquery to Find Products Not in the Cart.
SELECT * 
FROM products 
WHERE product_id NOT IN (SELECT DISTINCT product_id FROM cart);

--  16. Subquery to Find Customers Who Haven't Placed Orders.
SELECT * 
FROM customers 
WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM orders);

-- 17. Subquery to Calculate the Percentage of Total Revenue for a Product.
SELECT p.product_id, 
       p.name, 
       ROUND((SUM(oi.itemAmount) / (SELECT SUM(total_price) FROM orders) * 100), 2) AS revenue_percentage
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_id, p.name;

-- 18. Subquery to Find Products with Low Stock.
SELECT product_id, name, stockQuantity  
FROM products  
WHERE stockQuantity = (SELECT MIN(stockQuantity) FROM products);

--  19. Subquery to Find Customers Who Placed High-Value Orders.
SELECT 
    c.customer_id, 
    CONCAT(c.first_name, ' ', c.last_name) AS full_name, 
    c.email, 
    SUM(o.total_price) AS total_order_value
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name, c.email
HAVING total_order_value > (SELECT AVG(total_price) FROM orders);

SET SQL_SAFE_UPDATES = 1;
